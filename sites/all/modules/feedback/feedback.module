  <?php
    // Add the css and js files.
    drupal_add_js(drupal_get_path('module', 'feedback') . '/feedback.js');
    drupal_add_css(drupal_get_path('module', 'feedback') . '/feedback.css');
    module_load_include('inc', 'feedback', 'feedback_form_alter');


/*
 * Implementation of hook_permission .
 *
 */

  function feedback_permission() {
    return array(
      'give feedback' => array(
        'title' => t('Give feedback'),
        'description' => t('Allow certain roles to view feedback without control of the settings.'),
      ),
      'view feedback' => array(
        'title' => t('View feedback'),
        'description' => t('Allow certain roles to view feedback without control of the settings.'),
      ),
      'administer feedback' => array(
        'title' => t('Administer feedback'),
        'description' => t('Add, delete and edit the settings for feedback.'),
      ),
    );
  }

  /**
   * Block hook Implementaion.
   *
   */
  function feedback_block_info() {
    $blocks = array();
    $blocks['feedback_rating_avg_block'] = array(
      'info' => t('Feedback Block'),
    );

    return $blocks;
  }
  /**
   * This function is about what is the render to the block.
   */
  function feedback_block_view($delta='') {
    $block = array();
    switch ($delta) {
      case 'feedback_rating_avg_block' :
        $block['subject'] = t('Your Rating');
        // Call get_avg().
        $block['content'] = get_avg();
        break;
    }
    return $block;
  }

  /*
   * Implementation of hook_menu function.
   *
   */
  function feedback_menu() {
    // Feedback form for student.
    $items['teacher/feedback'] = array(
      'title' => 'Feedback Page',
      'description' => 'Simple custom hook_menu() implementation.',
      'file' => 'teacher_feedback.inc',
      'file path' => drupal_get_path('module','feedback'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('form_feed_form'),
      'access callback' => 'user_access',
      'access arguments' => array('give feedback'),

    );
    // View feedback form for teacher.
    $items['teacher/view-feedback'] = array(
      'title' => 'Feedback Page',
      'description' => 'Simple custom hook_menu() implementation.',
      'file' => 'teacher_view_feedback.inc',
      'file path' => drupal_get_path('module','feedback'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('student_feedback_form'),
      'access callback' => 'user_access',
      'access arguments' => array('view feedback'),
    );
    // Form for hook_theme.
    $items['feedback/theme'] = array(
      'title' => 'Feedback Page',
      'description' => 'Simple custom hook_menu() implementation.',
      'file' => 'teacher_detail.inc',
      'file path' => drupal_get_path('module','feedback'),
      'page callback' => '_user_detail',
      'access callback' => 'user_access',
      'access arguments' => array('give feedback'),
    );
    return $items;
  }

  /**
   * Implementation of hook_form_alter.
   */
  function feedback_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'views_exposed_form') {
      $form['select'] = array(
      '#type' => 'select',
      '#title' => t('Choose a value'),
      '#id' => 'csv_select',
      '#weight' => -10,
      '#options' => get_students_names(),
      );
    }
  }
   /**
   * Callback for block.
   *
   * @return avg.
   *   Average rating for current logged in teacher.
   */
  function get_avg() {
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'teacher_feedback');
    $result = $query->execute();
    // Get all uid of all users.
    $sum = 0;
    $count = 0;
    if (!empty($result)) {
      $nids = array_keys($result['node']);
      foreach ($nids as $key => $nid) {
        $nodes = node_load($nid);
          if ($user->uid == $nodes->field_teacher_ref['und'][0]['target_id']) {
            $students = user_load($nodes->uid);
            // Numbers of students whose are given the feedback to current logged in teacher.
            $count++;
            // Perform calculation and get sum of all ratings.
            $sum += $nodes->field_attitude['und'][0]['value'] + $nodes->field_knowledge['und'][0]['value'] + $nodes->field_friendliness['und'][0]['value'];
          }
      }
      // Get average.
      if ($count != 0) {
        $avg = '' . $sum / (3 * $count);
      }
      else {
        $avg = 'No one give rating  you yet' ;
      }
    }
    return $avg;
  }
  /**
   * Implementation of hook_theme.
   */
  function feedback_theme($aa) {
    dpm($aa);
    return array(
      'feedback' => array(
        'variable' => array(
          'Uid' => NULL,
          'Uname' => NULL
          ),
        //'template' => 'user_detail'
        )
      );


  }
